-- Create roles and permissions system

-- Custom types
create type public.app_permission as enum (
  'manage_organization',
  'manage_agents', 
  'create_missions',
  'manage_missions',
  'create_rewards',
  'manage_rewards',
  'approve_organizations',
  'manage_admins'
);

create type public.app_role as enum (
  'agent',
  'admin'
);

create type public.organization_permission_type as enum (
  'mobilizing_partners',
  'mission_partners', 
  'reward_partners',
  'cin_administrators'
);

-- USER ROLES
create table public.user_roles (
  id              bigint generated by default as identity primary key,
  user_id         uuid references auth.users on delete cascade not null,
  role            app_role not null,
  organization_id uuid references public.organizations on delete cascade,
  created_at      timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at      timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (user_id, role, organization_id)
);
comment on table public.user_roles is 'Application roles for each user, optionally scoped to an organization.';

-- ORGANIZATION PERMISSIONS
create table public.organization_permissions (
  id bigint generated by default as identity primary key,
  organization_id uuid references public.organizations(id) on delete cascade not null,
  permission_type organization_permission_type not null,
  status text default 'pending' check (status in ('pending', 'approved', 'rejected')),
  requested_by uuid references auth.users(id) not null,
  reviewed_by uuid references auth.users(id),
  reviewed_at timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique (organization_id, permission_type)
);
comment on table public.organization_permissions is 'Organization permission requests and approvals for different privileges.';

-- JWT-BASED AUTHORIZATION FUNCTIONS
-- These functions check JWT data directly without database lookups

-- Check if user has a specific privilege in their active organization
create or replace function public.has_active_org_privilege(
  privilege_type text
)
returns boolean as $$
declare
  user_orgs_jwt jsonb;
  active_org_id text;
begin
  user_orgs_jwt := (auth.jwt() ->> 'user_organizations')::jsonb;
  active_org_id := auth.jwt() ->> 'active_organization_id';
  
  if user_orgs_jwt is null or active_org_id is null then
    return false;
  end if;
  
  -- Check if active organization has the privilege with 'approved' status
  return jsonb_path_exists(
    user_orgs_jwt, 
    '$[*] ? (@.id == $org_id && @.privileges[*] ? (@.type == $privilege && @.status == "approved"))',
    jsonb_build_object('org_id', active_org_id, 'privilege', privilege_type)
  );
end;
$$ language plpgsql stable security definer set search_path = '';

-- Check if user has admin role in their active organization
create or replace function public.is_active_org_admin()
returns boolean as $$
declare
  user_roles_jwt jsonb;
  active_org_id text;
begin
  user_roles_jwt := (auth.jwt() ->> 'user_roles')::jsonb;
  active_org_id := auth.jwt() ->> 'active_organization_id';
  
  if user_roles_jwt is null or active_org_id is null then
    return false;
  end if;
  
  -- Check if user has admin role in active organization
  return jsonb_path_exists(
    user_roles_jwt, 
    '$[*] ? (@.scope == "organization" && @.organization_id == $org_id && @.role == "admin")',
    jsonb_build_object('org_id', active_org_id)
  );
end;
$$ language plpgsql stable security definer set search_path = '';

-- Check if user can create missions (has mission_partners privilege + admin role)
create or replace function public.can_create_missions()
returns boolean as $$
begin
  return is_active_org_admin() and has_active_org_privilege('mission_partners');
end;
$$ language plpgsql stable security definer set search_path = '';

-- Check if user can manage missions (has mission_partners privilege + admin role)
create or replace function public.can_manage_missions()
returns boolean as $$
begin
  return is_active_org_admin() and has_active_org_privilege('mission_partners');
end;
$$ language plpgsql stable security definer set search_path = '';

-- Check if user can create rewards (has reward_partners privilege + admin role)
create or replace function public.can_create_rewards()
returns boolean as $$
begin
  return is_active_org_admin() and has_active_org_privilege('reward_partners');
end;
$$ language plpgsql stable security definer set search_path = '';

-- Check if user is CIN administrator (has cin_administrators privilege + admin role)
create or replace function public.is_cin_admin()
returns boolean as $$
begin
  return is_active_org_admin() and has_active_org_privilege('cin_administrators');
end;
$$ language plpgsql stable security definer set search_path = '';
